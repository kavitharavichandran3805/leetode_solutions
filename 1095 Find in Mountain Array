class Solution {
    public int findInMountainArray(int target, MountainArray mountainArr) {
        int peak=peakElement(mountainArr);
        int res1=bn_asc(mountainArr,target,0,peak);
        if(res1!=-1){
            return res1;
        }
        return bn_des(mountainArr,target,peak+1,mountainArr.length()-1);
    }
    public int peakElement(MountainArray mountainArr){
        int start=0;
        int end=mountainArr.length()-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(mountainArr.get(mid)>mountainArr.get(mid+1)){
                end=mid;
            }
            else{
                start=mid+1;
            }
        }
        return start;
    }
    public int bn_asc(MountainArray mountainArr,int target,int start,int end) {

        while (start <= end) {
                int mid = start + (end - start) / 2;
                if (mountainArr.get(mid) == target) {
                    return mid;
                } else if (mountainArr.get(mid) < target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                } 
        }
        return -1;
    }
        public int bn_des(MountainArray mountainArr,int target,int start,int end){
                
                while(start<=end){
                    int mid = start + (end - start) / 2;
                    if (mountainArr.get(mid) == target) {
                        return mid;
                } else if (mountainArr.get(mid) < target) {
                    end = mid - 1;
                } else  {
                    start = mid + 1;
                } 
                }
                return -1;       
        }
    
    
}
